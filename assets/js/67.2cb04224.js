(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{391:function(t,e,r){"use strict";r.r(e);var s=r(8),a=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"红黑树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[t._v("#")]),t._v(" 红黑树")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("编辑中")])]),t._v(" "),e("ul",[e("li",[t._v("树：非线性存储结构，由 n 个有限结点组成一个具有层次关系的集合。、")]),t._v(" "),e("li",[t._v("二叉搜索树：左孩子小于父节点，右孩子大于父节点。")]),t._v(" "),e("li",[t._v("AVL  树（平衡树）：具有二叉搜索树的全部特性，左右子树高度差至多为1，插入或删除节点时需要左旋和右旋保持树对的平衡。")])]),t._v(" "),e("p",[t._v("再插入、删除很频繁的场景中，平衡树需要频繁着进行调整，会使平衡树的性能大打折扣，为解决这个问题，提出了红黑树。")]),t._v(" "),e("h2",{attrs:{id:"_1-红黑树性质"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-红黑树性质"}},[t._v("#")]),t._v(" 1. 红黑树性质")]),t._v(" "),e("ol",[e("li",[t._v("每个节点要么是"),e("strong",[t._v("黑色")]),t._v("，要么是"),e("font",{attrs:{color:"red"}},[e("strong",[t._v("红色")])]),t._v("。")],1),t._v(" "),e("li",[t._v("根节点是黑色。")]),t._v(" "),e("li",[t._v("每个叶子节点（NIL）是"),e("strong",[t._v("黑色")]),t._v("。")]),t._v(" "),e("li",[t._v("每个"),e("font",{attrs:{color:"red"}},[e("strong",[t._v("红色")])]),t._v("节点的两个子节点一定都是黑色。 （不能有两个红色节点相邻）")],1),t._v(" "),e("li",[t._v("任意一节点到每个叶子节点的路径都包含"),e("strong",[t._v("数量相同")]),t._v("的"),e("strong",[t._v("黑色")]),t._v("节点，俗称：黑高。\n"),e("ul",[e("li",[t._v("可以推断出：如果一个节点存在黑子节点，你们该节点肯定有两个子节点。")])])])]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree.png",alt:"red-black-tree"}}),t._v(" "),e("p",[t._v("红黑树并不是一个完美平衡二叉查找树，从图中可以看到，根节点 P 的左子树高于右子树。但左右子树黑节点的层数相等，所以红黑树这种平衡为"),e("strong",[t._v("黑色完美平衡")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"_2-红黑树查找"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-红黑树查找"}},[t._v("#")]),t._v(" 2. 红黑树查找")]),t._v(" "),e("p",[t._v("与二叉搜索树的查找方式一样")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree2.png",alt:"red-black-tree2"}}),t._v(" "),e("h2",{attrs:{id:"_3-红黑树平衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-红黑树平衡"}},[t._v("#")]),t._v(" 3. 红黑树平衡")]),t._v(" "),e("p",[t._v("红黑树保持自平衡依靠：左旋、右旋、变色")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("变色：节点颜色红变黑，或者黑变红。")])]),t._v(" "),e("li",[e("p",[t._v("左旋：以某节点作为支点（旋转节点），其右子结点变为旋转节点的父节点，右子节点的左子节点变为旋转节点的右子节点，左子节点保持不变。")])]),t._v(" "),e("li",[e("p",[t._v("右旋：以某节点作为支点（旋转节点），其左子结点变为旋转节点的父节点，左子节点的右子节点变为旋转节点的左子节点，右子节点保持不变。")])])]),t._v(" "),e("p",[t._v("左旋图示")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-left-rotate.png",alt:"red-black-tree-left-rotate"}})]),t._v(" "),e("p",[t._v("左旋动图")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-left-rotate.gif",alt:"查看源图像"}})]),t._v(" "),e("p",[t._v("右旋图示")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-right-rotate.png",alt:"red-black-tree-right-rotate"}})]),t._v(" "),e("p",[t._v("右旋动图")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-right-rotate.gif",alt:"red-black-tree-right-rotate"}})]),t._v(" "),e("h2",{attrs:{id:"_4-红黑树插入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-红黑树插入"}},[t._v("#")]),t._v(" 4. 红黑树插入")]),t._v(" "),e("p",[t._v("插入操作包括两部分工作：")]),t._v(" "),e("ol",[e("li",[t._v("查找插入的位置")]),t._v(" "),e("li",[t._v("插入后自平衡")])]),t._v(" "),e("p",[t._v("注意：插入节点，必须为"),e("font",{attrs:{color:"red"}},[e("strong",[t._v("红色")])]),t._v("，因为红色在父节点（如果存在）为黑色节点时，红黑树的黑色平衡没被破坏，不需要做自平衡操作。但如果插入节点是黑色，那么插入位置所在的子树黑色节点总是多 1，必须做自平衡。")],1),t._v(" "),e("p",[t._v("红黑树插入情况分析：")]),t._v(" "),e("p",[e("strong",[t._v("情景1：红黑树为空树")])]),t._v(" "),e("p",[t._v("直接把插入节点作为根节点，并把插入的节点设为黑色，因为性质 2 规定根节点是黑色。")]),t._v(" "),e("p",[e("strong",[t._v("情景2：插入节点的 Key 已存在")])]),t._v(" "),e("p",[t._v("更新当前节点的值，为插入节点的值。")]),t._v(" "),e("p",[e("strong",[t._v("情景3：插入节点的父节点为黑色")])]),t._v(" "),e("p",[t._v("由于插入节点是红色的，插入后并不影响红黑树的平衡。根据 Q 的大小选择插入的左右节点。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert-red-node.png",alt:"red-black-tree-insert-red-node"}}),t._v(" "),e("p",[e("strong",[t._v("情景4：插入节点的父节点为红色")])]),t._v(" "),e("p",[t._v("依据性质2可知，根节点是黑色，如果插入节点的父节点为红色，那么该父节点不可能为根节点，所以插入节点总是存在祖父节点。")]),t._v(" "),e("p",[e("strong",[t._v("情景4.1：叔叔节点存在并且为红色节点")]),t._v("，即父节点和叔叔节点都为红色")]),t._v(" "),e("p",[t._v("依据性质4可知，红色节点不能相连，所以祖父节点肯定为黑色。")]),t._v(" "),e("p",[t._v("因为不可以同时存在两个相连的红节点，那么此时该插入子树的红黑层数的情况是：黑红红，显然最简单的处理方式是改成：红黑红。")]),t._v(" "),e("p",[t._v("处理：")]),t._v(" "),e("ol",[e("li",[t._v("将 P 和 U 改成黑色")]),t._v(" "),e("li",[t._v("将 PP 改成红色")]),t._v(" "),e("li",[t._v("将 PP 设置为当前节点，进行后续")])]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert-red-node1.png",alt:"red-black-tree-insert-red-node1"}}),t._v(" "),e("p",[t._v("可以看到，将 PP 节点设为红色，如果 PP 的父节点是黑色，那么无需做任何处理；但，如果 PP 的父节点是红色就违反了红黑树的性质，所以需要将 PP 设置为当前节点，继续做插入操作自平衡处理，直到平衡为止。")]),t._v(" "),e("p",[e("strong",[t._v("情景4.2：叔叔节点不存在或为黑节点，并且插入节点的父节点是祖父节点的左子节点")])]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert-red-node2.png",alt:"red-black-tree-insert-red-node2"}}),t._v(" "),e("p",[e("strong",[t._v("情景4.2.1：新插入节点，为左子节点")]),t._v("（LL双红）")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert-red-node3.png",alt:"red-black-tree-insert-red-node3"}}),t._v(" "),e("p",[t._v("处理：")]),t._v(" "),e("ol",[e("li",[t._v("变色：将 P 设置为黑色，将 PP 设置为红色")]),t._v(" "),e("li",[t._v("对 PP 节点进行右旋")])]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert-red-node4.png",alt:"red-black-tree-insert-red-node4"}}),t._v(" "),e("p",[e("strong",[t._v("情景4.2.2：新插入节点，为右子节点")]),t._v("（LR双红）")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert-red-node5.png",alt:"red-black-tree-insert-red-node5"}}),t._v(" "),e("p",[t._v("处理方式")]),t._v(" "),e("ol",[e("li",[t._v("P 节点左旋（得到了 4.2.1 的情况：LL 双红）")]),t._v(" "),e("li",[t._v("变色：将 I 设置为黑色，将 PP 设置为红色")]),t._v(" "),e("li",[t._v("对 PP 节点进行右旋")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert-red-node6.png",alt:"red-black-tree-insert-red-node6"}})]),t._v(" "),e("p",[e("strong",[t._v("情景4.3：叔叔节点不存在或为黑色，插入节点的父节点是祖父节点的右子节点")])]),t._v(" "),e("p",[t._v("也就是情景 4.2 的相反情况。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert-red-node7.png",alt:"red-black-tree-insert-red-node7"}}),t._v(" "),e("p",[e("strong",[t._v("情景4.3.1：新插入节点为父节点的右子节点（RR双红）")])]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert-red-node8.png",alt:"red-black-tree-insert-red-node8"}}),t._v(" "),e("p",[t._v("处理：")]),t._v(" "),e("ol",[e("li",[t._v("变颜色：将 P 设置为黑色，将 PP 设置为红色")]),t._v(" "),e("li",[t._v("对 PP 进行左旋")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert-red-node9.png",alt:"red-black-tree-insert-red-node9"}})]),t._v(" "),e("p",[e("strong",[t._v("情景4.3.2：新插入节点为父节点的左子节点（RL双红）")])]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert-red-node10.png",alt:"red-black-tree-insert-red-node10"}}),t._v(" "),e("p",[t._v("处理")]),t._v(" "),e("ol",[e("li",[t._v("P 节点右旋（得到了 4.3.1 的情况：RR 双红）")]),t._v(" "),e("li",[t._v("变色：将 I 设置为黑色，将 PP 设置为红色")]),t._v(" "),e("li",[t._v("对 PP 节点进行左旋")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert-red-node11.png",alt:"red-black-tree-insert-red-node11"}})]),t._v(" "),e("h2",{attrs:{id:"_5-红黑树插入案例分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-红黑树插入案例分析"}},[t._v("#")]),t._v(" 5. 红黑树插入案例分析")]),t._v(" "),e("p",[t._v("下面看看这棵红黑树，需要插入新的节点 7.")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert1.png",alt:"red-black-tree-insert1"}}),t._v(" "),e("p",[t._v("简化一下，把 NIL 节点去掉。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert2.png",alt:"red-black-tree-insert2"}}),t._v(" "),e("p",[t._v("先将准备插入的节点改成红色，也就是红色节点7，找到它应该插入的位置，应该为 8 的左节点。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert3.png",alt:"red-black-tree-insert3"}}),t._v(" "),e("p",[t._v("现在就属于情景 4.1，叔叔节点存在并且为红色节点。可以将父节点和叔叔节点变成黑色，爷爷节点变成红色，将爷爷节点置为当前节点。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert4.png",alt:"red-black-tree-insert4"}}),t._v(" "),e("p",[t._v("此时的当且节点为红 15，属于情景 4.2.2，爷爷节点为黑色，父节点为红色，叔叔节点为红色，LR 双红。通过将节点 5 左旋，获得 4.2.1 的情况 LL 双红。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert5.png",alt:"red-black-tree-insert5"}}),t._v(" "),e("p",[t._v("将节点 15 和 19 变色，并将 19 设置为当前节点")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert6.png",alt:"red-black-tree-insert6"}}),t._v(" "),e("p",[t._v("对节点 19 进行右旋，此时就得到最后的红黑树")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/red-black-tree-insert7.png",alt:"red-black-tree-insert7"}})])}),[],!1,null,null,null);e.default=a.exports}}]);