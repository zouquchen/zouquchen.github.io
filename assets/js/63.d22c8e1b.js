(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{387:function(_,v,t){"use strict";t.r(v);var n=t(8),r=Object(n.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"算法复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#算法复杂度"}},[_._v("#")]),_._v(" 算法复杂度")]),_._v(" "),v("p",[_._v("算法复杂度分为"),v("strong",[_._v("时间复杂度")]),_._v("和"),v("strong",[_._v("空间复杂度")]),_._v("。")]),_._v(" "),v("p",[_._v("时间复杂度——指执行算法所需要的计算工作量；")]),_._v(" "),v("p",[_._v("空间复杂度——指执行这个算法所需要的内存空间。")]),_._v(" "),v("h2",{attrs:{id:"_1-时间复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-时间复杂度"}},[_._v("#")]),_._v(" 1 时间复杂度")]),_._v(" "),v("h3",{attrs:{id:"_1-1-概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-概念"}},[_._v("#")]),_._v(" 1.1 概念")]),_._v(" "),v("p",[_._v("时间复杂度（时间复杂性），定性的描述算法的运行时间，这是一个代表算法输入值的字符串的长度的函数。")]),_._v(" "),v("p",[_._v("时间复杂度常用大"),v("code",[_._v("O")]),_._v("符号表述，不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，亦即考察输入值大小趋近无穷时的情况。")]),_._v(" "),v("h3",{attrs:{id:"_1-2-理解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-理解"}},[_._v("#")]),_._v(" 1.2 理解")]),_._v(" "),v("p",[_._v("参考："),v("a",{attrs:{href:"https://blog.csdn.net/qq_41523096/article/details/82142747",target:"_blank",rel:"noopener noreferrer"}},[_._v("一套图 搞懂“时间复杂度”"),v("OutboundLink")],1)]),_._v(" "),v("blockquote",[v("p",[v("strong",[_._v("例")]),_._v("：给你一条长 n 寸的面包，每 10 天吃掉 1 寸，那么吃掉整个面包需要几天？")]),_._v(" "),v("p",[v("strong",[_._v("答")]),_._v("：10n，T(n)=10n")]),_._v(" "),v("p",[v("strong",[_._v("例")]),_._v("：给你一条长 n 寸的面包，吃掉第 1 寸需要 1 天时间，吃掉第 2 寸需要 2 天时间，吃掉第 3 寸需要 3 天时间……那么吃掉整个面包需要几天？")]),_._v(" "),v("p",[v("strong",[_._v("答")]),_._v("：1+2+3+......+ n-1 + n = (1+n)*n/2 = 0.5n"),v("sup",[_._v("2")]),_._v(" + 0.5n，T(n)= 0.5n"),v("sup",[_._v("2")]),_._v(" + 0.5n")])]),_._v(" "),v("p",[_._v("算法 A 的相对时间是 T(n) = 10n")]),_._v(" "),v("p",[_._v("算法 B 的相对时间是 T(n)= 0.5n"),v("sup",[_._v("2")]),_._v(" + 0.5n")]),_._v(" "),v("p",[_._v("这两个到底谁的运行时间更长一些？这就要看 n 的取值了。")]),_._v(" "),v("p",[_._v("所以，这时候有了渐进时间复杂度（asymptotic time complexity）的概念，官方的定义如下：")]),_._v(" "),v("p",[_._v("若存在函数 f(n)，使得当n趋近于无穷大时，T(n)/ f(n) 的极限值为不等于零的常数，则称 f(n) 是 T(n) 的同数量级函数。")]),_._v(" "),v("p",[_._v("记作 T(n)= O( f(n) )，称 O( f(n) ) 为算法的渐进时间复杂度，简称时间复杂度。渐进时间复杂度用大写 O 来表示，所以也被称为大 O 表示法。")]),_._v(" "),v("p",[v("font",{attrs:{color:"blue"}},[_._v("直白地讲，时间复杂度就是把时间规模函数 T(n) 简化为一个数量级，这个数量级可以是 n、n"),v("sup",[_._v("2")]),_._v("、n"),v("sup",[_._v("3")]),_._v("……")])],1),_._v(" "),v("p",[_._v("评价一个算法流程的好坏，先看时间复杂度的指标，然后再分析不同数据样本下的实际运行时间，也就是“常数项时间”")]),_._v(" "),v("h3",{attrs:{id:"_1-3-举例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-举例"}},[_._v("#")]),_._v(" 1.3 举例")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("时间规模函数")]),_._v(" "),v("th",[_._v("时间复杂度")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("T(n)= 2")]),_._v(" "),v("td",[_._v("T(n)=  O(1)")])]),_._v(" "),v("tr",[v("td",[_._v("T(n)= 3n")]),_._v(" "),v("td",[_._v("T(n)=  O(n)")])]),_._v(" "),v("tr",[v("td",[_._v("T(n)= 0.5n"),v("sup",[_._v("2")]),_._v(" + 0.5n")]),_._v(" "),v("td",[_._v("T(n)=  O(n"),v("sup",[_._v("2")]),_._v(")")])]),_._v(" "),v("tr",[v("td",[_._v("T(n) = 5logn")]),_._v(" "),v("td",[_._v("T(n) = O(logn)")])])])]),_._v(" "),v("p",[_._v("时间复杂度排序：O(1)< O(logn)< O(n)< O(n^2)")]),_._v(" "),v("p",[_._v("其它形式的时间复杂度：O(nlogn)、O(n"),v("sup",[_._v("3")]),_._v(")、O(m*n)、O(2"),v("sup",[_._v("n")]),_._v(")、O(n!)")]),_._v(" "),v("h2",{attrs:{id:"空间复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度"}},[_._v("#")]),_._v(" 空间复杂度")]),_._v(" "),v("p",[_._v("额外空间复杂度")])])}),[],!1,null,null,null);v.default=r.exports}}]);