(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{431:function(s,t,a){"use strict";a.r(t);var n=a(8),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"redis底层数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis底层数据结构"}},[s._v("#")]),s._v(" Redis底层数据结构")]),s._v(" "),t("p",[s._v("内容参考：《Redis设计与实现》")]),s._v(" "),t("h2",{attrs:{id:"_1-简单动态字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-简单动态字符串"}},[s._v("#")]),s._v(" 1. 简单动态字符串")]),s._v(" "),t("p",[s._v("Redis没有直接使用 C 语言传统的字符串表示（以空字符结尾的字符数组，一下简称C字符串），而是构建了一种名为"),t("strong",[s._v("简单动态字符串")]),s._v("（Simple Dynamic String，SDS）的抽象类型。")]),s._v(" "),t("h3",{attrs:{id:"_1-1-sds定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-sds定义"}},[s._v("#")]),s._v(" 1.1 SDS定义")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sdshdr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" free"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" buf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ul",[t("li",[s._v("len：记录 buf 数组中已使用字节的数量，等于 SDS 所保存字符串的长度。")]),s._v(" "),t("li",[s._v("free：记录 buf 数组中未使用字节的数量。")]),s._v(" "),t("li",[s._v("buf[]：字节数组，用于保存字符串。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs/redis-sds1.png",alt:"在这里插入图片描述"}})]),s._v(" "),t("ul",[t("li",[s._v("free 属性值为 5：表示 SDS 分配 5 字节未使用空间。")]),s._v(" "),t("li",[s._v("len 属性值为 5：表示 SDS 保存一个 5 字节长的字符串。")]),s._v(" "),t("li",[s._v("buf 属性是一个 char 类型的数组，保存了 5 个字符和 1 个空字符"),t("code",[s._v("\\0")]),s._v("，后面由 5 字节未使用空间。长度为 "),t("code",[s._v("5 + 5 + 1 = 11")])])]),s._v(" "),t("h3",{attrs:{id:"_1-2-sds与c字符串区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-sds与c字符串区别"}},[s._v("#")]),s._v(" 1.2 SDS与C字符串区别")]),s._v(" "),t("p",[s._v("C 语言使用后为 N+1 的字符数组表示长度为 N 的字符串，并且字符数组最后一个元素总是空字符 "),t("code",[s._v("\\0")]),s._v("。")]),s._v(" "),t("p",[s._v("🔶 "),t("strong",[s._v("常数复杂度获取字符串长度")])]),s._v(" "),t("p",[s._v("C 字符串不记录自身的长度信息，所以获取一个 C 字符串的长度，程序必须遍历整个字符串，时间复杂度为O(N)。")]),s._v(" "),t("p",[s._v("SDS 在 len 属性中记录了 SDS 本身的长度，获取 SDS 长度的的时间复杂度为 O(1).")]),s._v(" "),t("p",[s._v("🔶 "),t("strong",[s._v("杜绝缓冲区溢出")])]),s._v(" "),t("p",[s._v("C 字符串不记录自身长度带来的另一个问题是容易造成缓冲区溢出（Buffer Overflow）。")]),s._v(" "),t("blockquote",[t("p",[s._v("举个例子，两个相邻内存中存放C字符串s1和s2，s1保存字符串"),t("code",[s._v("redis")]),s._v("，s2保存字符串"),t("code",[s._v("mongoDB")]),s._v("，如果此时将s1内容修改为"),t("code",[s._v("Redis Cluster")]),s._v("而忘记分配足够的空间，那么s1的数据将溢出到s2所在的空间，导致s2被修改。")])]),s._v(" "),t("p",[s._v("SDS 空间分配策略完全杜绝 了发生缓冲区溢出的可能性，当需要对 SDS 进行修改时，首先检查 SDS 空间是否满足修改所需的要求，如果不满足会自动扩展空间到需要的大小后再进行修改。")]),s._v(" "),t("p",[s._v("🔶 "),t("strong",[s._v("减少修改字符串时带来的内存重分配次数")])]),s._v(" "),t("p",[s._v("每次增长或缩短一个C字符串，程序都要对保存这个C字符串的数组进行一次内存重新分配：")]),s._v(" "),t("ul",[t("li",[s._v("在操作之前，需要通过内存重分配来扩展底层数组空间大小，否则会产生缓冲区溢出。")]),s._v(" "),t("li",[s._v("缩短字符操作：在操作之后，需要通过内存重分配来释放不再使用的空间，否则会产生内存泄露。")])]),s._v(" "),t("blockquote",[t("p",[s._v("内存重分配设计复杂的算法，可能需要执行系统调用，非常耗时。在Redis中，需要经常修改字符串，并且对速度要求苛刻，如果每次修改字符串都要内存重分配的话，会对整体的性能造成影响。")])]),s._v(" "),t("p",[s._v("SDS通过"),t("strong",[s._v("未使用空间")]),s._v("解除了字符串长度和底层数组长度之间的关联。SDS实现了"),t("strong",[s._v("空间预分配")]),s._v("和"),t("strong",[s._v("惰性空间")]),s._v("两种优化策略。")]),s._v(" "),t("p",[s._v("▶ "),t("strong",[s._v("空间预分配")]),s._v("：用于优化字符串增长操作")]),s._v(" "),t("p",[s._v("当对SDS进行修改时（修改后的字符串长度变长），首先会检查未分配空间是否足够，如果足够的话，将使用未分配空间，而不需要空间扩展。如果空间不够的话，需要进行空间扩展，程序不仅会分配所需的必须空间，还会分配额外的空间。通过预分配策略，SDS将连续增长N次字符串所需的内存重分配次数从必定N次降低为最多N次。")]),s._v(" "),t("p",[s._v("▶ "),t("strong",[s._v("惰性空间释放")]),s._v("：用于优化字符串缩短操作")]),s._v(" "),t("p",[s._v("当SDS缩短时，并不会立即使用内存重分配来回收缩短后多出来的字节，而是使用free属性将这些字节的数量记录起来，为将来可能有的增长操作提供了优化。\nSDS提供相应的API，在我们有需要时，真正地释放SDS的未使用空间，所以不需要担心惰性空间释放策略会造成内存浪费。")]),s._v(" "),t("p",[s._v("🔶 "),t("strong",[s._v("二进制安全")])]),s._v(" "),t("p",[s._v("C字符串中的字符必须符合编码要求，除了字符串的末尾外，字符串里面不能包含空字符，否则最先被程序读入的空字符将被误认为是字符串结尾，这些限制使得C字符串只能保存文本数据，而不能保存图片、音频、视频、压缩文件这样的二进制数据。")]),s._v(" "),t("p",[s._v("为了确保Redis可以适用于各种不同的使用场景，不仅可以保存文本数据，还可以保存任意格式的二进制数据。SDS的API是二进制安全的，程序不会对数据做任何处理，输入在写入时是什么样，读出来就是什么样。")]),s._v(" "),t("p",[s._v("🔶 "),t("strong",[s._v("兼容部分C字符串函数")])]),s._v(" "),t("p",[s._v("SDS 遵循 C 字符串以空字符串结尾的管理，这样可以重用一部分 "),t("code",[s._v("<string.h>")]),s._v(" 库定义的函数。")]),s._v(" "),t("p",[s._v("🔷 "),t("strong",[s._v("总结")])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("C字符串")]),s._v(" "),t("th",[s._v("SDS")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("获取字符串长度的时间复杂度为O(N)")]),s._v(" "),t("td",[s._v("获取字符串长度的时间复杂度为O(1)")])]),s._v(" "),t("tr",[t("td",[s._v("API是不安全的，可能找出缓冲区溢出")]),s._v(" "),t("td",[s._v("API是安全的，不会找出缓冲区溢出")])]),s._v(" "),t("tr",[t("td",[s._v("修改字符串长度N次必然执行N次内存重分配")]),s._v(" "),t("td",[s._v("修改字符串长度N次最多需要执行N次内存重分配")])]),s._v(" "),t("tr",[t("td",[s._v("只能保存文本数据")]),s._v(" "),t("td",[s._v("可以保存文本或二进制数据")])]),s._v(" "),t("tr",[t("td",[s._v("可以使用所有"),t("code",[s._v("<string.h>")]),s._v("库中的函数")]),s._v(" "),t("td",[s._v("可以使用部分"),t("code",[s._v("<string.h>")]),s._v("库中的函数")])])])]),s._v(" "),t("h2",{attrs:{id:"_2-链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-链表"}},[s._v("#")]),s._v(" 2. 链表")]),s._v(" "),t("p",[s._v("链表数据结构由"),t("strong",[s._v("链表")]),s._v("和"),t("strong",[s._v("链表节点")]),s._v("两部分组成。通过"),t("strong",[s._v("链表")]),s._v("结构，使链表、链表节点的操作更加方便。")]),s._v(" "),t("p",[s._v("🔶 "),t("strong",[s._v("链表节点")])]),s._v(" "),t("p",[s._v("链表节点使用"),t("code",[s._v("adlist.h/listNode")]),s._v("结构表示")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("listNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 前置节点")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("listNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("prev"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 后置节点")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("listNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 节点值")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("listNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("多个listNode可以通过prev和next指针组成双端链表。")]),s._v(" "),t("p",[s._v("🔶 "),t("strong",[s._v("链表")])]),s._v(" "),t("p",[s._v("链表使用"),t("code",[s._v("adlist.h/list")]),s._v("结构表示：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("list")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表头节点")]),s._v("\n\tlistNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表尾节点")]),s._v("\n\tlistNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("tail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 链表所包含的节点数量")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 节点值复制函数")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("dup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ptr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 节点值释放函数")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("free"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ptr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 节点值对比函数")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("match"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ptr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("提供表头指针 head、表位指针 tail、链表长度计数器 len。")]),s._v(" "),t("ul",[t("li",[s._v("dup 函数：复制链表节点所保存的值。")]),s._v(" "),t("li",[s._v("free：释放链表节点所保存的值。")]),s._v(" "),t("li",[s._v("match：对比链表节点所保存的值和另一个输入值是否相等。")])]),s._v(" "),t("p",[s._v("🔶 "),t("strong",[s._v("结构图")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs/redis-linkedlist1.png",alt:"在这里插入图片描述"}})]),s._v(" "),t("p",[s._v("🔶 "),t("strong",[s._v("特性")])]),s._v(" "),t("ul",[t("li",[s._v("双端：链表节点带有prev、next指针，获取某个节点的前置节点和后置节点。")]),s._v(" "),t("li",[s._v("无环：头节点prev指针和尾节点next指针指向NULL。")]),s._v(" "),t("li",[s._v("带表头指针和表位指针：通过list结构的head指针和tail指针获取链表的表头节点和表尾节点的时间复杂度为O(1)。")]),s._v(" "),t("li",[s._v("带链表长度计数器：获取链表中节点数量的时间复杂度为O(1)。")]),s._v(" "),t("li",[s._v("多态：链表节点使用void*指针来保存节点值，并且可以通过list结构的dup、free、match三个属性为节点值设置类型特定函数，所以链表可以用于保存各种不同类型的值。")])]),s._v(" "),t("h2",{attrs:{id:"_3-字典"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-字典"}},[s._v("#")]),s._v(" 3. 字典")]),s._v(" "),t("p",[s._v("字典（符号表、关联数组、映射），用于保存键值对的抽象数据结构。")]),s._v(" "),t("h3",{attrs:{id:"_3-1-实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-实现"}},[s._v("#")]),s._v(" 3.1 实现")]),s._v(" "),t("p",[s._v("Redis的字典使用哈希表作为底层实现，由哈希表、哈希表节点、字典三个结构组成。一个哈希表里面可以有多个哈希表节点，每一个哈希节点就保存了字典中的一个键值对。")]),s._v(" "),t("p",[s._v("🔶 "),t("strong",[s._v("哈希表")])]),s._v(" "),t("p",[s._v("哈希表使用"),t("code",[s._v("dict.h/dictht")]),s._v("结构表示")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dictht")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 哈希表数组")]),s._v("\n\tdictEntry "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("table"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 哈希表大小")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 哈希表大小掩码，用于计算索引值")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 总是等于size-1")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" sizemark"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//该哈希表已有节点数量")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" used"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" dictht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("table属性是一个数组，数组中每个元素都是一个指向dictEntry结构的指针，每一个dictEntry结构保持着一个键值对。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs/redis-map1.png",alt:"在这里插入图片描述"}})]),s._v(" "),t("p",[s._v("🔶 "),t("strong",[s._v("哈希表节点")])]),s._v(" "),t("p",[s._v("哈希表使用"),t("code",[s._v("dict.h/dictEntry")]),s._v("结构表示，每个dictEntry结构都保存着一个键值对。")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dictht")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 键")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 值")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("val"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\tuint64_tu64"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\tint64_ts64"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指向下个哈希表节点，形成链表")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dictEntry")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" dictEntry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("ul",[t("li",[s._v("key 保存键")]),s._v(" "),t("li",[s._v("value 保存值，值可以是一个指针，或者是一个uint64_t整数，或者是一个int64_t整数。")]),s._v(" "),t("li",[s._v("next 是指向下一个哈希表节点的指针，用于解决哈希冲突。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs/redis-map2.png",alt:"在这里插入图片描述"}})]),s._v(" "),t("p",[s._v("🔶 "),t("strong",[s._v("字典")])]),s._v(" "),t("p",[s._v("字典由"),t("code",[s._v("dict.h/dict")]),s._v("结构表示")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" struc dict "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 类型特定函数")]),s._v("\n\tdictType "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 私有数据")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("privdata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 哈希表")]),s._v("\n\tdictht ht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// rehash索引（渐进式rehash扩容时使用，后面介绍），当rehash不再进行时，值为-1")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" trehashidx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("ul",[t("li",[s._v("type 和 privdata 属性是针对不同类型的键值对，为创建多态字典而设置的。")]),s._v(" "),t("li",[s._v("type 属性是一个指向 dictType 结构的指针，每个 dictType 结构保存了一簇"),t("strong",[s._v("用于操作特定类型键值对的函数")]),s._v("，Redis 会为用途不同的字典设置不同的类型特定函数。")]),s._v(" "),t("li",[s._v("privdata 属性保存需要传给那些特定函数的可选参数。")])]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" struc dictType "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 计算哈希值的函数")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("hashFunction"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 复制键的函数")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("keyDup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("privdata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 复制值的函数")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("valDup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("privdata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对比键的函数")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("keyCompare"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("privdata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 销毁键的函数")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("keyDestructor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("privdata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 销毁值的函数")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("valDestructor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("privdata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" dictType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("▶ ht 属性包含两个哈希表，字典只使用 ht[0] 哈希表，ht[1] 哈希表只会在对 ht[0] 哈希表进行 rehash 时使用。\n▶ rehashidx 记录了 rehash 目前的进度，扩容到了第几个值，如果目前没有进行 rehash，值为 -1。")]),s._v(" "),t("p",[s._v("下图展示一个普通状态下的字典（没有进行rehash）：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2023/08/image-20240426201202244.png",alt:"image-20240426201202244"}})]),s._v(" "),t("h3",{attrs:{id:"_3-2-哈希算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-哈希算法"}},[s._v("#")]),s._v(" 3.2 哈希算法")]),s._v(" "),t("p",[s._v("当要将一个新的键值添加到字典里面时，就是将其添加到ht[0]哈希表中，程序需要根据键值对的键计算出哈希值的索引值，根据索引值，将包含新键值对的哈希表节点放到哈希表数组的指定索引上面。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs/redis-map3.png",alt:"在这里插入图片描述"}})]),s._v(" "),t("p",[s._v("通过链表法解决哈希冲突。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs/redis-map4.png",alt:"在这里插入图片描述"}})]),s._v(" "),t("h3",{attrs:{id:"_3-3-rehash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-rehash"}},[s._v("#")]),s._v(" 3.3 rehash")]),s._v(" "),t("p",[s._v("随着操作的不断进行，哈希表保存的键值对会逐渐地增多或者减少，为了让哈希表的负载因子（load factor）维持在一个合理的范围内，当哈希表保存的键值对数量太多或者太少时，程序需要对哈希表的大小进行扩展或收缩。步骤如下：")]),s._v(" "),t("ol",[t("li",[s._v("为字典的 ht[1] 哈希表分配空间，ht[1] 的大小为"),t("strong",[s._v("第一个大于等于")]),s._v("\n$$\nht[0].used \\times2^n\n$$")]),s._v(" "),t("li",[s._v("将保存在 ht[0] 中的所有键值对 rehash 到 ht[1] 上面，就是重新计算键的哈希值和索引值，并移动到指定位置。")]),s._v(" "),t("li",[s._v("当 ht[0] 包含的所有键值对都迁移到 ht[1] 后（ht[0]变为空表），释放 ht[0]，将 ht[1] 设置为 ht[0]，并在 ht[1] 新创建一个空白哈希表，为下一次 rehash 做准备。")])]),s._v(" "),t("h3",{attrs:{id:"_3-4-渐进式rehash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-渐进式rehash"}},[s._v("#")]),s._v(" 3.4 渐进式rehash")]),s._v(" "),t("p",[s._v("如果 redis 的字典中保存大量键值对，要一次性将这些键值对全部 rehash 到 ht[1] 的话，庞大的计算可能会导致服务器在一段时间内停止服务。因此需要分多次、渐进式地将 ht[0] 里面的键值对慢慢地 rehash 到 ht[1]。下面是 rehash 的步骤：")]),s._v(" "),t("ol",[t("li",[s._v("为 ht[1] 分配空间，让字典同时持有 ht[0] 和 ht[1] 两个哈希表。")]),s._v(" "),t("li",[s._v("在字典中维持一个索引计算器变量 rehashidx，并将它设置为 0，表示 rehash 正式开始。")]),s._v(" "),t("li",[s._v("在 rehash 进行期间，每次对字典执行添加、删除、查找或更新操作时，程序除了执行指定的操作以外，还会顺带将 ht[0] 在哈希表在 rehashidx 索引上的所有键值对 rehash 到 ht[1]，当 rehash 工作完成之后，程序将 rehashidx 值增一。")]),s._v(" "),t("li",[s._v("随着字典操作的不断执行，最终在某个时间点上，ht[0] 的所有键值对都会被 rehash 至 ht[1]，这时程序将 rehashidx 属性设置为 -1，表示 rehash 操作已完成。")])]),s._v(" "),t("p",[s._v("在渐进式 rehash 过程中，字典会同时使用 ht[0] 和 ht[1]，所以字典的删除、查找、更新等操作会在两个哈希表上进。")]),s._v(" "),t("blockquote",[t("p",[s._v("例如，要在字典里面查找一个键的话，程序会现在ht[0]里面查找，如果没找到的话，就会继续到ht[1]里面查找。")])]),s._v(" "),t("p",[s._v("在渐进式 rehash 过程中，添加到字典的键值对一律会被保存到 ht[1] 里面，保证 ht[0] 的键值对数量只减不增。")]),s._v(" "),t("h2",{attrs:{id:"四、跳跃表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、跳跃表"}},[s._v("#")]),s._v(" 四、跳跃表")]),s._v(" "),t("p",[s._v("跳跃表（skiplist）是一种有"),t("strong",[s._v("序数据结构")]),s._v("，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。跳跃表支持平均 O(logN)、最坏 O(N) 复杂度的节点查找。")]),s._v(" "),t("p",[s._v("Redis 使用跳跃表作为有序集合键的底层实现之一。")]),s._v(" "),t("p",[s._v("跳跃表由 zskiiplistNode 跳跃表节点和 zskiplist 跳跃表两个结构定义：")]),s._v(" "),t("h3",{attrs:{id:"_4-1-跳跃表节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-跳跃表节点"}},[s._v("#")]),s._v(" 4.1 跳跃表节点")]),s._v(" "),t("p",[s._v("跳跃表节点由 "),t("code",[s._v("redis.h/zskiplistNode")]),s._v(" 结构定义：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 层")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistLevel")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 前进指针")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("forward"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 跨度")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" span"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" level"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 后退指针")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("backward"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 分值")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 成员对象")]),s._v("\n\trobj "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" zskiplistNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("🔶 层 level[]")]),s._v(" "),t("p",[s._v("跳跃表的level数组可以包含很多元素，每个元素都包含一个指向其他节点的指针，可以通过这些层来加快访问其他节点的速度，层的数量越多访问节点的速度越快。")]),s._v(" "),t("p",[s._v("每次创建一个新跳跃表节点的时候，程序都根据幂次定律随机生成一个介于1和32之间的值作为level数组的大小。")]),s._v(" "),t("p",[s._v("🔶 前进指针 forward")]),s._v(" "),t("p",[s._v("每个层都有一个指向表尾方向的前进指针"),t("code",[s._v("level[i].forward")])]),s._v(" "),t("p",[s._v("🔶 跨度 span")]),s._v(" "),t("p",[s._v("层的跨度"),t("code",[s._v("level[i].span")]),s._v("用于记录两个节点之间的距离。跨度并不是用于遍历操作，而是用于计算排位的，在查找某一个节点的过程中，将沿途访问过的所有层的跨度累计起来，得到的结果就是目标节点在跳跃表中的排位。")]),s._v(" "),t("p",[s._v("🔶 后退指针 backward")]),s._v(" "),t("p",[s._v("用于从表尾向表头方向访问节点，每个节点只有一个后退指针，每次只能后退至前一个节点。")]),s._v(" "),t("p",[s._v("🔶 分值 score 和成员 obj")]),s._v(" "),t("p",[s._v("分值：double 类型，跳跃表中的所有节点都按分支从小到大排序。")]),s._v(" "),t("p",[s._v("成员对象：是一个指针，它指向一个SDS字符串对象。各个节点保存的成员对象必须是唯一的，分值相同的节点按成员对象在字典序中的大小来进行排序。")]),s._v(" "),t("h3",{attrs:{id:"_4-2-跳跃表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-跳跃表"}},[s._v("#")]),s._v(" 4.2 跳跃表")]),s._v(" "),t("p",[s._v("跳跃表由"),t("code",[s._v("redis.h/zskiplist")]),s._v("结构定义：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplist")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表头节点和表尾节点")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("skiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("header"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("tail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表中节点的数量")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表中数量最大的节点的层数")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" level"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("header和tail指针分别指向跳跃表的表头和表尾节点，通过这两个指针，程序定位表头节点和表尾节点的复杂度尾O(1)。")]),s._v(" "),t("p",[s._v("跳跃表结构如下图：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs/redis-zskiplist1.png",alt:"在这里插入图片描述"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);