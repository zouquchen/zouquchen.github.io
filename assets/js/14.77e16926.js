(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{337:function(a,v,t){"use strict";t.r(v);var _=t(8),s=Object(_.a)({},(function(){var a=this,v=a._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"java基本概念与常识"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java基本概念与常识"}},[a._v("#")]),a._v(" Java基本概念与常识")]),a._v(" "),v("h2",{attrs:{id:"什么是jdk和jre"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是jdk和jre"}},[a._v("#")]),a._v(" 什么是JDK和JRE？")]),a._v(" "),v("p",[v("strong",[a._v("JDK")]),a._v("：Java Development Kit，Java的SDK，拥有JRE所拥有的一切，还有编译器（javac）和工具（javadoc、jdb），它能够创建和编译程序。")]),a._v(" "),v("p",[v("strong",[a._v("JRE")]),a._v("：Java运行时环境，它是运行已编译Java程序所需的所有内容的集合，包括JVM、Java类库、Java命令等。但是，它不能创建新程序。")]),a._v(" "),v("p",[a._v("如果只是运行Java程序的话，只需要安装JRE，如果需要Java编程方面的工作就需要安装JDK。")]),a._v(" "),v("h2",{attrs:{id:"什么是jvm"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是jvm"}},[a._v("#")]),a._v(" 什么是JVM?")]),a._v(" "),v("p",[a._v("Java虚拟机，运行Java字节码的虚拟机，JVM有针对于不同系统的特定实现，目的是使相同的字节码，都会给出相同的结果，一次编译，随处可以运行。")]),a._v(" "),v("blockquote",[v("p",[v("strong",[a._v("JVM 并不是只有一种！只要满足 JVM 规范，每个公司、组织或者个人都可以开发自己的专属 JVM。")]),a._v(" 也就是说我们平时接触到的 HotSpot VM 仅仅是是 JVM 规范的一种实现而已。")])]),a._v(" "),v("h2",{attrs:{id:"什么是字节码-采用字节码的好处"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是字节码-采用字节码的好处"}},[a._v("#")]),a._v(" 什么是字节码？采用字节码的好处？")]),a._v(" "),v("p",[a._v("JVM可以理解的代码就是字节码（.class文件），它不面向任何特定的处理器，只面向于Java虚拟机。在一定程度上解决传统解释型语言执行效率低的问题，但又保留解释型语言可移植的特点。所以Java程序运行时比较高效，由于字节码并不针对一种特定的机器，因此，Java程序无需重新编译便可在不同操作系统上运行。")]),a._v(" "),v("h2",{attrs:{id:"java和c-区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java和c-区别"}},[a._v("#")]),a._v(" Java和C++区别？")]),a._v(" "),v("ul",[v("li",[a._v("都是面向对象的语言，支持封装、继承、多态")]),a._v(" "),v("li",[a._v("Java不提供指针访问内存，程序内存更安全。")]),a._v(" "),v("li",[a._v("Java是单继承，C++支持多重继承；Java的接口可以多继承")]),a._v(" "),v("li",[a._v("Java有自动内存管理机制，不需要程序员手动释放无用内存")]),a._v(" "),v("li",[a._v("在C中，字符串或字符数组最后都需要一个额外的字符"),v("code",[a._v("\\0")]),a._v("来表示结束")])]),a._v(" "),v("blockquote",[v("p",[a._v("Java可以使用Unsafe类提供的本地方法操作内存。")])]),a._v(" "),v("h2",{attrs:{id:"为什么说java语言编译与解释并存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么说java语言编译与解释并存"}},[a._v("#")]),a._v(" 为什么说Java语言编译与解释并存？")]),a._v(" "),v("p",[a._v("高级编程语言按程序的执行方式分为：编译型语言、解释型语言")]),a._v(" "),v("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/Java-Interpreted-Compiled.png",alt:"image-20220713194521535"}}),a._v(" "),v("h3",{attrs:{id:"编译型语言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#编译型语言"}},[a._v("#")]),a._v(" 编译型语言")]),a._v(" "),v("p",[a._v("编译器针对"),v("strong",[a._v("特定的操作系统")]),a._v("将源代码"),v("strong",[a._v("一次性翻译成可被该平台执行的机器码")])]),a._v(" "),v("p",[a._v("优点：一次编译，无限次运行，效率高")]),a._v(" "),v("p",[a._v("缺点：可执行程序不可跨平台、源代码不可跨平台（C语言中long类型的长度在不同的平台不一样）")]),a._v(" "),v("h3",{attrs:{id:"解释型语言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解释型语言"}},[a._v("#")]),a._v(" 解释型语言")]),a._v(" "),v("p",[a._v("解释器对源程序"),v("strong",[a._v("逐行解释")]),a._v("成特定平台的机器码并立即执行。")]),a._v(" "),v("p",[a._v("优点：可跨平台，一次编写，到处运行。")]),a._v(" "),v("p",[a._v("缺点：效率低")]),a._v(" "),v("h3",{attrs:{id:"java语言特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java语言特点"}},[a._v("#")]),a._v(" JAVA语言特点")]),a._v(" "),v("p",[a._v("Java语言既具有"),v("strong",[a._v("编译型语言的跨平台")]),a._v("特征，也具有"),v("strong",[a._v("解释型语言的一次编写到处运行")]),a._v("特征，因此Java程序要经过先编译后解释两步骤，由Java编写的程序要经过编译器生成字节码文件"),v("code",[a._v("*.class")]),a._v("，字节码文件必须由Java解释器来解释执行。")]),a._v(" "),v("blockquote",[v("p",[a._v("编译型语言：C、C++、Golang、Pascal")]),a._v(" "),v("p",[a._v("解释型语言：Python、JavaScript、PHP、Shell、MATLAB")]),a._v(" "),v("p",[a._v("解释与编译共存：Java、C#")])]),a._v(" "),v("h2",{attrs:{id:"java程序从源码到运行的过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java程序从源码到运行的过程"}},[a._v("#")]),a._v(" Java程序从源码到运行的过程？")]),a._v(" "),v("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/Java-code2run.png"}}),a._v(" "),v("ul",[v("li",[a._v("JDK中的javac编译器将"),v("code",[a._v(".java")]),a._v("文件编译为JVM可以理解的"),v("code",[a._v(".class")]),a._v("文件。")]),a._v(" "),v("li",[a._v("JVM加载字节码文件生成机器码。")]),a._v(" "),v("li",[a._v("操作系统运行机器码。")])]),a._v(" "),v("h2",{attrs:{id:"六大设计原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#六大设计原则"}},[a._v("#")]),a._v(" 六大设计原则")]),a._v(" "),v("ol",[v("li",[v("p",[a._v("单一职责原则：针对于类，一个类只负责一项职责。")]),a._v(" "),v("p",[a._v("如类T负责两个不同职责：职责P1，职责P2。当职责P1需求变更而改变T时，可能造成职责P2发生故障，所以需要将类T的粒度分解为T1，T2。")])]),a._v(" "),v("li",[v("p",[a._v("里氏替换原则")])]),a._v(" "),v("li",[v("p",[a._v("依赖倒转原则")])]),a._v(" "),v("li",[v("p",[a._v("接口隔离原则")])]),a._v(" "),v("li",[v("p",[a._v("迪米特法则")])]),a._v(" "),v("li",[v("p",[a._v("开闭原则：对扩展类开放，对修改类关闭。")])])])])}),[],!1,null,null,null);v.default=s.exports}}]);