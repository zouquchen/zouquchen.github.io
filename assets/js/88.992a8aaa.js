(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{411:function(e,v,r){"use strict";r.r(v);var t=r(8),_=Object(t.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"spring-mvc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc"}},[e._v("#")]),e._v(" Spring MVC")]),e._v(" "),v("h2",{attrs:{id:"_1-说说对mvc的了解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-说说对mvc的了解"}},[e._v("#")]),e._v(" 1 说说对MVC的了解？")]),e._v(" "),v("p",[e._v("MVC是模型（Model）、视图（VIew）、控制器（Controller）的简写，其核心思想是通过将"),v("strong",[e._v("业务逻辑")]),e._v("、"),v("strong",[e._v("数据")]),e._v("、"),v("strong",[e._v("显示")]),e._v("分离来组织代码。"),v("strong",[e._v("降低了视图与业务逻辑的耦合。")])]),e._v(" "),v("p",[v("strong",[e._v("Model")]),e._v("：数据模型，提供要展示的数据，包含数据和业务（dao和service）。")]),e._v(" "),v("p",[v("strong",[e._v("View")]),e._v("：负责模型的展示，一般就是我们见到的用户界面。")]),e._v(" "),v("p",[v("strong",[e._v("Controller")]),e._v("：接收用户请求，委托模型进行处理，处理完毕后把返回的模型数据返回给视图，视图负责展示。")]),e._v(" "),v("blockquote",[v("p",[e._v("Model 1时代")]),e._v(" "),v("p",[e._v("在Web早期开发中，主要分为两层：视图层、模型层")]),e._v(" "),v("p",[e._v("优点：架构简单，适合小项目开发；")]),e._v(" "),v("p",[e._v("缺点：JSP职责不单一，职责过重，不利于维护。")]),e._v(" "),v("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/mvc-model1.png",alt:"image-20221114152044835"}}),e._v(" "),v("p",[e._v("Model 2 时代")]),e._v(" "),v("p",[e._v("Java Bean（Model）+ JSP（View）+ Servlet（Controller）")]),e._v(" "),v("ul",[v("li",[e._v("Model：系统涉及的数据，也就是dao和bean")]),e._v(" "),v("li",[e._v("View：展示模型中的数据，只是用来展示")]),e._v(" "),v("li",[e._v("Controller：处理用户请求，返回数据给JSP并展示给用户。")])]),e._v(" "),v("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/mvc-model2.png",alt:"image-20221114152103300"}}),e._v(" "),v("p",[e._v("Model 2的抽象程度和封装程度远远不够，无法避免重复造轮子，大大降低程序的维护性和复用性。")])]),e._v(" "),v("h2",{attrs:{id:"_2-spring-mvc-主要组件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring-mvc-主要组件"}},[e._v("#")]),e._v(" 2 Spring MVC 主要组件")]),e._v(" "),v("p",[e._v("1）"),v("strong",[e._v("DispatcherServlet")])]),e._v(" "),v("p",[e._v("是一种前端控制器，由框架提供。")]),e._v(" "),v("p",[e._v("作用：统一处理请求和响应。除此之外还是整个流程控制的中心，由 DispatcherServlet 来调用其他组件，处理用户的请求")]),e._v(" "),v("p",[e._v("2）"),v("strong",[e._v("HandlerMapping")])]),e._v(" "),v("p",[e._v("处理器映射器，由框架提供。")]),e._v(" "),v("p",[e._v("作用：根据请求的 url、method 等信息来查找具体的 Handler(一般来讲是Controller)")]),e._v(" "),v("p",[e._v("3）Handler(一般来讲是Controller)")]),e._v(" "),v("p",[e._v("处理器，注意，这个需由工程师自己开发。")]),e._v(" "),v("p",[e._v("作用：在 DispatcherServlet 的控制下，Handler对具体的用户请求进行处理")]),e._v(" "),v("p",[e._v("4）"),v("strong",[e._v("HandlerAdapter")])]),e._v(" "),v("p",[e._v("处理器适配器 ，由框架提供。")]),e._v(" "),v("p",[e._v("作用：根据映射器找到的处理器 Handler 信息，按照特定的规则去执行相关的处理器 Handler。")]),e._v(" "),v("blockquote",[v("p",[e._v("小结：")]),e._v(" "),v("p",[e._v("Handler 是用来干活的工具；")]),e._v(" "),v("p",[e._v("HandlerMapping 用于根据需要干的活找到相应的工具；")]),e._v(" "),v("p",[e._v("HandlerAdapter 是使用工具干活的人。")])]),e._v(" "),v("p",[e._v("5）"),v("strong",[e._v("ViewResolver")])]),e._v(" "),v("p",[e._v("视图解析器，由框架提供。")]),e._v(" "),v("p",[e._v("作用： ViewResolver 负责将处理结果生成 View 视图。 ViewResolver 首先根据逻辑视图名解析成物理图名，即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。")]),e._v(" "),v("p",[e._v("6）"),v("strong",[e._v("View")])]),e._v(" "),v("p",[e._v("视图，工程师自己开发")]),e._v(" "),v("p",[e._v("作用：View接口的职责就是接收model对象、Request对象、Response对象，并渲染输出结果给Response对象。")]),e._v(" "),v("h2",{attrs:{id:"_3-springmvc-工作流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-springmvc-工作流程"}},[e._v("#")]),e._v(" 3 SpringMVC 工作流程")]),e._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/mvc-dispatcherServlet.png",alt:"image-20220609225445322"}})]),e._v(" "),v("ol",[v("li",[e._v("用户通过浏览器发起 HttpRequest 请求到前端控制器 (DispatcherServlet)。")]),e._v(" "),v("li",[e._v("DispatcherServlet 将用户请求发送给处理器映射器 (HandlerMapping)。")]),e._v(" "),v("li",[e._v("处理器映射器 (HandlerMapping)会根据请求，找到负责处理该请求的处理器（handler），并将其封装为处理器执行链返回 (HandlerExecutionChain) 给 DispatcherServlet")]),e._v(" "),v("li",[e._v("DispatcherServlet 会根据处理器执行链中的处理器，找到能够执行该处理器的处理器适配器(HandlerAdaptor)    --注，处理器适配器有多个")]),e._v(" "),v("li",[e._v("处理器适配器 (HandlerAdaptoer) 会调用对应的具体的 Controller")]),e._v(" "),v("li",[e._v("Controller 将处理结果及要跳转的视图封装到一个对象 ModelAndView 中并将其返回给处理器适配器 (HandlerAdaptor)")]),e._v(" "),v("li",[e._v("HandlerAdaptor 直接将 ModelAndView 交给 DispatcherServlet ，至此，业务处理完毕")]),e._v(" "),v("li",[e._v("业务处理完毕后，我们需要将处理结果展示给用户。于是DisptcherServlet 调用 ViewResolver，将 ModelAndView 中的视图名称封装为视图对象")]),e._v(" "),v("li",[e._v("ViewResolver 将封装好的视图 (View) 对象返回给 DispatcherServlet")]),e._v(" "),v("li",[e._v("DispatcherServlet 调用视图对象，让其自己 (View) 进行渲染（将模型数据填充至视图中），形成响应对象 (HttpResponse)")]),e._v(" "),v("li",[e._v("前端控制器 (DispatcherServlet) 响应 (HttpResponse) 给浏览器，展示在页面上。")])])])}),[],!1,null,null,null);v.default=_.exports}}]);