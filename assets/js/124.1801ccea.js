(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{448:function(_,t,a){"use strict";a.r(t);var v=a(8),s=Object(v.a)({},(function(){var _=this,t=_._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"分布式概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式概念"}},[_._v("#")]),_._v(" 分布式概念")]),_._v(" "),t("h2",{attrs:{id:"_1-何为微服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-何为微服务"}},[_._v("#")]),_._v(" 1 何为微服务")]),_._v(" "),t("p",[_._v("把一个单独的应用程序开发为一套小服务，每个小服务运行在自己的进程中。这些服务围绕业务能力来构建，并通过完全自动化部署机制来独立部署。这些服务使用不同的编程语言书写，以及不同数据存储技术，并保持最低限度的集中式管理。")]),_._v(" "),t("p",[_._v("简而言之：拒绝大型单体应用，基于业务边界进行服务微化拆分，各个服务独立部署运行。")]),_._v(" "),t("h2",{attrs:{id:"_2-集群-分布式-节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-集群-分布式-节点"}},[_._v("#")]),_._v(" 2 集群&分布式&节点")]),_._v(" "),t("p",[_._v("集群：将几台服务器集中在一起，实现同一业务")]),_._v(" "),t("p",[_._v("分布式：分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像一个系统一样。分布式系统是建立在网络之上的软件系统。")]),_._v(" "),t("p",[_._v("节点：集群中的一个服务器。")]),_._v(" "),t("blockquote",[t("p",[_._v("京东是一个分布式系统，众多业务运行在不同的机器，所有业务构成一个大型的业务集群。每一个小的业务，比如用户系统，访问压力大的时候一台服务器是不够的。我们就应该将用户系统部署到多个服务器，也就是每一个业务系统也可以做集群化。")])]),_._v(" "),t("h2",{attrs:{id:"_3-远程调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-远程调用"}},[_._v("#")]),_._v(" 3 远程调用")]),_._v(" "),t("p",[_._v("在分布式系统中，各个服务可能处于不同主机，但是服务之间不可避免的需要互相调用，我们称为远程调用。")]),_._v(" "),t("h2",{attrs:{id:"_4-负载均衡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-负载均衡"}},[_._v("#")]),_._v(" 4 负载均衡")]),_._v(" "),t("p",[_._v("分布式系统中，A服务需要调用B服务，B服务在多台机器中多有存在，A调用任意一个服务器均可完成功能。为了使每一个服务器都不要太忙或者太闲，我们可以负载均衡的调用每一个服务器，提升网站的健壮性。")]),_._v(" "),t("p",[_._v("常见负载均衡算法：")]),_._v(" "),t("p",[t("strong",[_._v("轮询")]),_._v("：为第一个i请求选择健康池中的第一个后端服务器，然后按顺序往后以此选择，直到最后一个，再循环。")]),_._v(" "),t("p",[t("strong",[_._v("最小连接")]),_._v("：优先选择连接数最小，也就是压力最小的后端服务器，在会话较长的情况下可以考虑采取这种方式。")]),_._v(" "),t("h2",{attrs:{id:"_5-服务注册与发现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-服务注册与发现"}},[_._v("#")]),_._v(" 5 服务注册与发现")]),_._v(" "),t("p",[_._v("A服务调用B服务，A服务并不知道B服务当前在哪几台服务器有，哪些正常的，哪些服务器已经下线，解决这个问题可以引入注册中心。")]),_._v(" "),t("p",[_._v("如果某些服务下线，我们其他人可以实时的感知到其他服务的状态，从而避免调用不可用的服务。")]),_._v(" "),t("h2",{attrs:{id:"_6-服务熔断与服务降级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-服务熔断与服务降级"}},[_._v("#")]),_._v(" 6 服务熔断与服务降级")]),_._v(" "),t("p",[_._v("在微服务架构中，微服务之间通过网络进行通讯，存在相互依赖，当其中一个服务不可用时，有可能会造成雪崩效应。要防止这样的情况，必须要有容错机制来保护服务。")]),_._v(" "),t("p",[t("strong",[_._v("服务熔断")]),_._v("：设置服务的超时，当被调用的服务器经常失败到达某个阈值，我们可以开启短路保护机制，后来的请求不再去调用这个服务。本地直接返回默认的数据。")]),_._v(" "),t("p",[t("strong",[_._v("服务降级")]),_._v("：当系统处于高峰期，系统资源紧张，我们可以让非核心业务降级运行。降级就是某些服务不处理或者简单处理。")]),_._v(" "),t("h2",{attrs:{id:"_7-api网关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-api网关"}},[_._v("#")]),_._v(" 7 API网关")]),_._v(" "),t("p",[_._v("在微服务架构中，API Gateway作为整体架构的重要组件，它抽象了微服务中都需要的公共功能，同时提供了客户端负载均衡，服务自动熔断，灰度发布，统一认证，限流流控，日志统计等丰富功能，帮助我们解决很多API管理难题。")]),_._v(" "),t("h2",{attrs:{id:"_8-分布式事务场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-分布式事务场景"}},[_._v("#")]),_._v(" 8 分布式事务场景")]),_._v(" "),t("ol",[t("li",[_._v("跨库事务：一个应用某个功能需要操作多个数据库，不同数据库存储不同的业务数据。")]),_._v(" "),t("li",[_._v("分库分表：通常一个库数据量比较大或者预期未来的数据量比较大，都会进行水平拆分。")]),_._v(" "),t("li",[_._v("微服务化：大的应用服务拆分称不同的独立服务，简化业务逻辑。拆分后，独立服务之间通过RPC进行远程调用，实现彼此通信。")])])])}),[],!1,null,null,null);t.default=s.exports}}]);