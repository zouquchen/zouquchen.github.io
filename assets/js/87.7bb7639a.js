(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{410:function(a,t,s){"use strict";s.r(t);var n=s(8),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"spring常见面试问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring常见面试问题"}},[a._v("#")]),a._v(" Spring常见面试问题")]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("草稿")])]),a._v(" "),t("h2",{attrs:{id:"_1-什么是-spring-框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是-spring-框架"}},[a._v("#")]),a._v(" 1. 什么是 Spring 框架？")]),a._v(" "),t("p",[a._v("开源轻量级 Java 开发框架，Spring 框架指的是Spring Framework，它是很多模块的集合，使用这些模块可以很方便的协助我们开发。")]),a._v(" "),t("p",[a._v("核心思想：不重新造轮子，开箱即用。")]),a._v(" "),t("h2",{attrs:{id:"_2-spring-boot、springmvc-和-spring-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring-boot、springmvc-和-spring-的区别"}},[a._v("#")]),a._v(" 2. Spring Boot、SpringMVC 和 Spring 的区别？")]),a._v(" "),t("p",[a._v("Spring：是一个 IOC 容器，用来创建、管理 Bean 对象，使用依赖注入实现控制反转，可以方便的整合框架；同时，提供给 AOP 弥补 OOP 代码重复问题，可以将不同类不同方法中的公共处理抽取成切面，使用 AOP 对已有代码进行增强。如，日志统计、异常处理、事务等。")]),a._v(" "),t("p",[a._v("SpringMVC：是 Spring 对 Web 框架的一个解决方案，提供了一个总的前端控制器 Servlet，用来接收请求，然后定义了一套路由策略（url 到 handle 的映射）及适配执行 handle，将 handle 结果使用视图解析技术生成视图返回给前端。")]),a._v(" "),t("p",[a._v("SpringBoot：是 Spring 提供一个快速开发工具包，能让程序员更方便、更快速的开发基于 Spring + SpringMVC 应用，简化了配置，整合了一系列的解决方案（starter 机制）。")]),a._v(" "),t("h2",{attrs:{id:"_3-什么是-bean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-什么是-bean"}},[a._v("#")]),a._v(" 3. 什么是 bean？")]),a._v(" "),t("p",[a._v("简单来说，bean代指的就是那些被IoC容器所管理的对象。我们需要告诉IoC容器帮助我们管理哪些对象，这个是通过配置元数据来定义的。配置元数据可以是XML文件、注解或Java类。")]),a._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("\x3c!-- Constructor-arg with 'value' attribute --\x3e")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("bean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("id")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("..."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("..."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("constructor-arg")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("value")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("..."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("bean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("h2",{attrs:{id:"_4-bean-的作用域有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-bean-的作用域有哪些"}},[a._v("#")]),a._v(" 4. bean 的作用域有哪些？")]),a._v(" "),t("ul",[t("li",[a._v("singleton：唯一bean实例，默认是单例的。")]),a._v(" "),t("li",[a._v("prototype：每次请求都会创建一个新的bean实例。")]),a._v(" "),t("li",[a._v("request：每次HTTP请求都会创建一个新的bean实例，该bean仅在当前HTTP request内有效。")]),a._v(" "),t("li",[a._v("session：每一次来自新session的HTTP请求都会产生一个新的bean，该bean仅在当前HTTP session内有效。")]),a._v(" "),t("li",[a._v("global-session：全局session作用域，")])]),a._v(" "),t("h2",{attrs:{id:"_5-单例-bean-的线程安全了解吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-单例-bean-的线程安全了解吗"}},[a._v("#")]),a._v(" 5. 单例 bean 的线程安全了解吗？")]),a._v(" "),t("p",[a._v("Spring 本身没有针对 Bean 做线程安全处理，所以：")]),a._v(" "),t("ol",[t("li",[a._v("如果 Bean 是无状态的，那么 Bean 则是线程安全的")]),a._v(" "),t("li",[a._v("如果 Bean 是有状态，那么 Bean 则不是线程安全的")])]),a._v(" "),t("p",[a._v("另外，Bean 是不是线程安全，跟 Bean 的作用域没有关系，Bean 的作用域只是表示 Bean 的生命周期范围，对于任何生命周期的 Bean 都是一个对象，这个对象是不是线程安全的，还是得看这个 Bean 对象本身。")]),a._v(" "),t("p",[a._v("线程安全问题的解决办法：")]),a._v(" "),t("ol",[t("li",[a._v("在bean中尽量避免定义可变的成员变量。")]),a._v(" "),t("li",[a._v("在类中定义一个 ThreadLocal 成员变量，将需要的可变成员变量保存在 ThreadLocal 中。")])]),a._v(" "),t("h2",{attrs:{id:"_6-component-和-bean-的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-component-和-bean-的区别是什么"}},[a._v("#")]),a._v(" 6. @Component 和 @Bean 的区别是什么？")]),a._v(" "),t("ol",[t("li",[a._v("@Component 注解作用于类，而 @Bean 作用于方法。")]),a._v(" "),t("li",[a._v("@Component 通常是通过类路径扫描来自动侦测及自动装配到 Spring 容器。（我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出表示了需要装配的类自动装配到 Spring 的 bean 容器中）。@Bean注解通常是我们在标有该注解的方法中定义产生整个bean，@Bean告诉了Spring这是某个类的实例，当我们需要用它的时候还给我。")]),a._v(" "),t("li",[a._v("@Bean 注解比 @Component 注解的自定义性更强，而且很多地方我们只能通过 @Bean 注解来注册 bean。比如当我们引用第三方库中的类需要装配到 Spring 容器时，则只能通过 @Bean 来实现。")])]),a._v(" "),t("h2",{attrs:{id:"_7-autowired-与-resource-的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-autowired-与-resource-的区别是什么"}},[a._v("#")]),a._v(" 7. @Autowired 与 @Resource 的区别是什么？")]),a._v(" "),t("ol",[t("li",[a._v("@Autowired 是 Spring 提供的注解，@Resource 是 JDK 提供的注解。")]),a._v(" "),t("li",[a._v("@Autowired 只能按类型注入，如果存在多个 Bean 时需要使用@Qualifier 指明 Bean 的名称；")]),a._v(" "),t("li",[a._v("@Resource 默认按名称注入，当找不到对应名称时按照类型注入。")])]),a._v(" "),t("h2",{attrs:{id:"_8-将一个类声明为-bean-的注解有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-将一个类声明为-bean-的注解有哪些"}},[a._v("#")]),a._v(" 8. 将一个类声明为 bean 的注解有哪些？")]),a._v(" "),t("p",[a._v("一般使用 @Autowired 注解自动装配 bean，要想把类表示成可用于 @Autowired 注解自动装配的 bean 的类，需用一下注解：")]),a._v(" "),t("ul",[t("li",[a._v("@Component：通用的注解，可标注任意类为 Spring 组件。如果一个 Bean 不知道属于哪个层，可以使用@Component注解标注。")]),a._v(" "),t("li",[a._v("@Repository：对应持久层的Dao层，数据库相关操作。")]),a._v(" "),t("li",[a._v("@Service：对应服务层，主要设计一些复杂的逻辑，需要用到Dao层。")]),a._v(" "),t("li",[a._v("@Controller：对应Spring MVC控制层，接受用户请求并调用Service层返回数据给前端。")]),a._v(" "),t("li",[a._v("@Bean：通常作用在方法上，该方法会返回一个创建好的对象。")])]),a._v(" "),t("h2",{attrs:{id:"_9-说一说对-spring-容器的了解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-说一说对-spring-容器的了解"}},[a._v("#")]),a._v(" 9. 说一说对 Spring 容器的了解？")]),a._v(" "),t("p",[a._v("主要包含两种类型的容器：BeanFactory 和 ApplicationContext")]),a._v(" "),t("ul",[t("li",[a._v("BeanFactory：基础的IoC容器，默认采用延迟初始化策略。只有当客户端对象需要访问容器中的某个受管理对象啊的时候，才对该受管对象进行初始化以及依赖注入的操作。所以，相对来说，容器启动初期速度较快，所需要的资源有限。对于资源有限，且功能要求不是很严格的场景，BeanFactory是比较合适的IoC选择。")]),a._v(" "),t("li",[a._v("ApplicationContext：在BeanFactory基础上构建，ApplicationText所管理的对象，在该类型容器启动之后，默认全部初始化并绑定完成。所以，相对于BeanFactory来说，ApplicationContext要求更多的系统资源，启动时间会慢一些。在那些系统资源充足，并且要求更多的功能的场景中，ApplicationContext类型的容器是比较合适的选择。")])]),a._v(" "),t("h2",{attrs:{id:"_10-applicationcontext-与-beanfacatory-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-applicationcontext-与-beanfacatory-区别"}},[a._v("#")]),a._v(" 10. ApplicationContext 与 BeanFacatory 区别")]),a._v(" "),t("p",[a._v("ApplicationContext 继承 BeanFactory")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/BeanFactory%2526ApplicationContext.png",alt:"image-20220825103526220"}})]),a._v(" "),t("p",[a._v("BeanFactory 是 Spring 中非常核心的组件，表示 Bean 工厂，可以生成 Bean，维护 Bean。")]),a._v(" "),t("p",[a._v("ApplicationContext 继承了 BeanFactory，所以 ApplicationContext 拥有 BeanFactory 所有的特点，也是一个 Bean 工厂，但是 ApplicationContext 除继承了 BeanFactory 外，还继承了诸如EnvironmentCapable、MessageSource、ApplicationEventPublisher 等接口，从而 ApplicationContext 还要获取系统环境变量、国际化、事件发表等功能，这是 BeanFactory 所不具备的。")]),a._v(" "),t("h2",{attrs:{id:"_11-spring-中的设计模式-单例模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-spring-中的设计模式-单例模式"}},[a._v("#")]),a._v(" 11. Spring 中的设计模式——单例模式")]),a._v(" "),t("p",[a._v("在系统中，有一些对象其实我们只需要一个，比如：线程池、缓冲池、日志对象、驱动等对象。事实上，这一类对象只能有一个实例，如果制造出多个实例就可能会导致一些问题的产生，比如：程序行为异常、资源使用过量、不一致的结果。")]),a._v(" "),t("p",[a._v("使用单例的好处：")]),a._v(" "),t("ul",[t("li",[a._v("对于频繁使用的对象，可以省略创建对象所花费的时间，这对于那些重量级对象而言，是非常可观的一笔开销；")]),a._v(" "),t("li",[a._v("由于new操作的次数减少，因而对系统内存的使用率也会降低，减轻GC压力，缩短GC停顿时间。")])]),a._v(" "),t("h2",{attrs:{id:"_12-spring-事务的传播机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-spring-事务的传播机制"}},[a._v("#")]),a._v(" 12. Spring 事务的传播机制？")]),a._v(" "),t("ul",[t("li",[a._v("propagation_required：如果外部没有事务，就开启一个事务；如果外部存在一个事务，就加入到该事务中。适用于增删改。（常用）")]),a._v(" "),t("li",[a._v("propagation_supports：如果外部事务不存在，则不使用事务；如果外部存在一个事务，就加入到该事务中。适用于查询方法。（常用）")]),a._v(" "),t("li",[a._v("propagation_mandatory：如果外部事务不存在，抛出异常；如果外部存在一个事务，就加入到该事务中。")]),a._v(" "),t("li",[a._v("propagation_required_new：如果外部没有事务，就开启一个事务；如果外部存在一个事务，挂起外部事物，创建新的事物。")]),a._v(" "),t("li",[a._v("propagation_not_supported：如果外部没有事务，不开启事务；如果外部存在一个事务，挂起外部事物。")]),a._v(" "),t("li",[a._v("propagation_never：如果外部事务不存在，则不使用事务；如果外部存在一个事务，则抛出异常。")]),a._v(" "),t("li",[a._v("propagation_nested：嵌套事务，如果当前事务存在，则嵌套在事务中执行。如果当前事务不存在，则创建一个新事物。如果嵌套事务发送回滚，只回滚嵌套部分的事务。")])]),a._v(" "),t("h2",{attrs:{id:"_13-transactional-注解执行的流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-transactional-注解执行的流程"}},[a._v("#")]),a._v(" 13. @Transactional 注解执行的流程")]),a._v(" "),t("ol",[t("li",[a._v("事务管理器新建一个数据库连接 conn，保证方法内的所有操作都使用同一个数据库连接。")]),a._v(" "),t("li",[a._v("关闭自动提交：conn.autoCommit = false")]),a._v(" "),t("li",[a._v("获取第一步事务管理器创建的链接（是一个 ThreadLocal 对象，如果获取不到的话就自己创建，那么事务就失效了），执行一系列方法 sql")]),a._v(" "),t("li",[a._v("未抛异常，conn.commit()")]),a._v(" "),t("li",[a._v("抛出异常，conn.rollback()")])]),a._v(" "),t("h2",{attrs:{id:"_14-spring-事务什么时候会失效"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-spring-事务什么时候会失效"}},[a._v("#")]),a._v(" 14. Spring 事务什么时候会失效？")]),a._v(" "),t("p",[a._v("Spring事务的原理是 AOP，进行切面增强，那么事务失效的根本原因是 AOP 失效，常见的情况有：")]),a._v(" "),t("ol",[t("li",[a._v("方法不是 public 的，@Transactional 只能用于 public 方法上，否则事务不会失效，如果要用在非 public 方法上，可以开启 AspectJ 代理模式")]),a._v(" "),t("li",[a._v("数据库不支持事务")]),a._v(" "),t("li",[a._v("没有被 Spring 管理")]),a._v(" "),t("li",[a._v("异常被吃掉，事务不会回滚（或者抛出的异常没有被定义，默认为 RuntimeException）")]),a._v(" "),t("li",[a._v("方法互相调用时注解失效，需要分析是普通方法还是代理方法的调用，只要代理对象调用其他方法时注解才会生效。")])]),a._v(" "),t("p",[a._v("下面详细解释一下第五点，以下面这行代码为案例")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UserService")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Autowired")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("JdbcTemplate")]),a._v(" jdbcTemplate"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Transactional")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        jdbcTemplate"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("excute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"xxxxx1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Transactional")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("propagation "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Propagation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("NEVER")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        jdbcTemplate"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("excute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"xxxxx2"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br")])]),t("p",[t("code",[a._v("test()")]),a._v(" 方法开启事务，执行 sql 语句，再调用 "),t("code",[a._v("a()")]),a._v(" 方法，该方法也在这个事务当中。需要注意的是，"),t("code",[a._v("a()")]),a._v(" 方法也开启了事务，并设置传播机制为 NEVER，表示如果外部事务不存在，则不使用事务；如果外部存在一个事务，则抛出异常。")]),a._v(" "),t("p",[a._v("错误理解：因为带事务的方法 test() 调用方法 a()，由于 "),t("code",[a._v("a()")]),a._v(" 的传播机制为 NEVER，所以会抛出异常。")]),a._v(" "),t("p",[a._v("正确理解：首先我们要知道，Spring 内部执行的增强的 "),t("code",[a._v("test()")]),a._v(" 方法其实是调用被代理对象的 "),t("code",[a._v("test()")]),a._v("，被代理对象 "),t("code",[a._v("test()")]),a._v(" 方法调用的 "),t("code",[a._v("a()")]),a._v(" 方法是普通的方法，是没有经过 AOP 增强的方法，不存在事务，不会抛出异常。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 模拟代理类\npublic void test() {\n\t// 事务管理器新建一个数据库连接\n\t// conn.autocommit = false\n\t// target.test(); // 普通对象.test()\n\t// conn.commit() 或者 conn.rollback()\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("p",[a._v("那么如何修改呢？")]),a._v(" "),t("p",[a._v("方法1：把两个方法分到两个文件，通过 @Autowired 注入再调用，此时 "),t("code",[a._v("test()")]),a._v(" 方法调用的 "),t("code",[a._v("a()")]),a._v(" 方法就是动态代理生成的方法。")]),a._v(" "),t("p",[a._v("方法2：自己注入自己，通过 @Autowired 注入自己 UserService，调用 "),t("code",[a._v("userservice.a()")])]),a._v(" "),t("h2",{attrs:{id:"_15-spring-中的设计模式有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-spring-中的设计模式有哪些"}},[a._v("#")]),a._v(" 15. Spring 中的设计模式有哪些？")]),a._v(" "),t("p",[a._v("参考："),t("a",{attrs:{href:"https://www.cnblogs.com/kyoner/p/10949246.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Spring中用到了哪些设计模式"),t("OutboundLink")],1)]),a._v(" "),t("p",[a._v("主要有：工厂模式、单例模式、代理模式、模板方法、观察者模式、适配器模式")]),a._v(" "),t("p",[t("strong",[a._v("工厂模式")])]),a._v(" "),t("p",[a._v("Spring 可以通过 BeanFactory 和 Application 创建 bean 对象。")]),a._v(" "),t("p",[t("strong",[a._v("单例模式")])]),a._v(" "),t("p",[a._v("在我们的系统中，有一些对象其实我们只需要一个，比如说：线程池、缓存、对话框、注册表、日志对象、充当打印机、显卡等设备驱动程序的对象。事实上，这一类对象只能有一个实例，如果制造出多个实例就可能会导致一些问题的产生，比如：程序的行为异常、资源使用过量、或者不一致性的结果。")]),a._v(" "),t("p",[a._v("使用单例模式的好处")]),a._v(" "),t("ul",[t("li",[a._v("对于频繁使用的对象，可以"),t("strong",[a._v("省略创建对象所花费的时间")]),a._v("，这对于那些重量级对象而言，是非常可观的一笔系统开销；")]),a._v(" "),t("li",[a._v("由于new操作的次数减少，因而"),t("strong",[a._v("对系统内存的使用频率也会降低")]),a._v("，这将减轻GC压力，缩短GC停顿时间。")])]),a._v(" "),t("p",[t("strong",[a._v("代理模式")])]),a._v(" "),t("p",[a._v("AOP 能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。")]),a._v(" "),t("p",[a._v("AOP 就是基于动态代理的，如果要代理的对象实现了某个接口，那么会使用 JDK Proxy 去创建代理对象，而对于没有实现接口的对象，会使用Cglib生成一个被代理对象的子类来作为代理。")]),a._v(" "),t("p",[t("strong",[a._v("模板方法")])]),a._v(" "),t("p",[a._v("模板方法是一种行为设计模式，它定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。 模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤的实现方式。")]),a._v(" "),t("p",[a._v("Spring 中 "),t("code",[a._v("jdbcTemplate")]),a._v("、"),t("code",[a._v("hibernateTemplate")]),a._v(" 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。一般情况下，我们都是使用继承的方式来实现模板模式，但是 Spring 并没有使用这种方式，而是使用Callback 模式与模板方法模式配合，既达到了代码复用的效果，同时增加了灵活性。")]),a._v(" "),t("p",[t("strong",[a._v("观察者模式")])]),a._v(" "),t("p",[a._v("观察者模式是一种对象行为型模式。它表示的是一种对象与对象之间具有依赖关系，当一个对象发生改变的时候，这个对象所依赖的对象也会做出反应。Spring 事件驱动模型就是观察者模式很经典的一个应用。Spring 事件驱动模型非常有用，在很多场景都可以解耦我们的代码。比如我们每次添加商品的时候都需要重新更新商品索引，这个时候就可以利用观察者模式来解决这个问题。")]),a._v(" "),t("p",[t("strong",[a._v("适配器模式")])]),a._v(" "),t("p",[a._v("适配器模式将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。")]),a._v(" "),t("p",[a._v("spring AOP中的适配器模式：")]),a._v(" "),t("p",[a._v("我们知道 Spring AOP 的实现是基于代理模式，但是 Spring AOP 的增强或通知(Advice)使用到了适配器模式，与之相关的接口是"),t("code",[a._v("AdvisorAdapter")]),a._v(" 。Advice 常用的类型有："),t("code",[a._v("BeforeAdvice")]),a._v("、"),t("code",[a._v("AfterAdvice")]),a._v("、"),t("code",[a._v("AfterReturningAdvice")]),a._v(" 等等。每个类型Advice（通知）都有对应的拦截器： "),t("code",[a._v("MethodBeforeAdviceInterceptor")]),a._v("、"),t("code",[a._v("AfterReturningAdviceAdapter")]),a._v("、"),t("code",[a._v("AfterReturningAdviceInterceptor")]),a._v("。Spring 预定义的通知要通过对应的适配器，适配成 "),t("code",[a._v("MethodInterceptor")]),a._v("接口(方法拦截器)类型的对象（如："),t("code",[a._v("MethodBeforeAdviceInterceptor")]),a._v(" 负责适配 "),t("code",[a._v("MethodBeforeAdvice")]),a._v("）。")]),a._v(" "),t("p",[a._v("spring MVC中的适配器模式：")]),a._v(" "),t("p",[a._v("在Spring MVC中，"),t("code",[a._v("DispatcherServlet")]),a._v(" 根据请求信息调用 "),t("code",[a._v("HandlerMapping")]),a._v("，解析请求对应的 "),t("code",[a._v("Handler")]),a._v("。解析到对应的 "),t("code",[a._v("Handler")]),a._v("（也就是我们平常说的 "),t("code",[a._v("Controller")]),a._v(" 控制器）后，开始由 "),t("code",[a._v("HandlerAdapter")]),a._v(" 适配器处理。"),t("code",[a._v("HandlerAdapter")]),a._v(" 作为期望接口，具体的适配器实现类用于对目标类进行适配，"),t("code",[a._v("Controller")]),a._v(" 作为需要适配的类。")]),a._v(" "),t("hr"),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("草稿")])]),a._v(" "),t("h3",{attrs:{id:"aware的应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aware的应用"}},[a._v("#")]),a._v(" Aware的应用")]),a._v(" "),t("p",[a._v("工具类，用于获取Bean对象。 为什么不使用注解来注入Bean对象？")]),a._v(" "),t("ol",[t("li",[a._v("需要在静态方法中获取到 spring 管理的某个 bean")]),a._v(" "),t("li",[a._v("策略模式，枚举类中定义好策略以及对应的实现类，根据类名获取Bean对象进行后续操作")]),a._v(" "),t("li")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Component")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SpringUtil")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ApplicationContextAware")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 应用上下文环境")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ApplicationContext")]),a._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@SuppressWarnings")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"static-access"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("setApplicationContext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ApplicationContext")]),a._v(" applicationContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BeansException")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        context "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" applicationContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ApplicationContext")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getContext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 根据bean name 获取对象\n     *\n     * @param name\n     * @return\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 根据Class获取对象\n     * \n     * @param clazz\n     * @param <T>\n     * @return\n     * @throws BeansException\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BeansException")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br"),t("span",{staticClass:"line-number"},[a._v("30")]),t("br"),t("span",{staticClass:"line-number"},[a._v("31")]),t("br"),t("span",{staticClass:"line-number"},[a._v("32")]),t("br"),t("span",{staticClass:"line-number"},[a._v("33")]),t("br"),t("span",{staticClass:"line-number"},[a._v("34")]),t("br"),t("span",{staticClass:"line-number"},[a._v("35")]),t("br"),t("span",{staticClass:"line-number"},[a._v("36")]),t("br"),t("span",{staticClass:"line-number"},[a._v("37")]),t("br")])]),t("h3",{attrs:{id:"beanfactorypostprocess-与"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beanfactorypostprocess-与"}},[a._v("#")]),a._v(" BeanFactoryPostProcess 与")]),a._v(" "),t("p",[t("strong",[a._v("BeanFactoryPostProcess")])]),a._v(" "),t("p",[a._v("BeanFactoryPostProcess 可以对 beanDefination 进行修改，比如里面的 property 用的占位符"),t("code",[a._v("${xxx.xxx}$")]),a._v("，需要执行 "),t("code",[a._v("invokeBeanFactoryPostProcessors(beanFactory)")]),a._v(" 来将占位符 "),t("code",[a._v("${xxx.xxx}$")]),a._v("换成需要的值。")]),a._v(" "),t("p",[a._v("只要实现 BeanFactoryPostProcess 接口并重写其中的方法，就可以通过 beanFactory 对象对其中的 BeanDefinition 进行修改。")]),a._v(" "),t("h2",{attrs:{id:"spring-如何创建一个-bean-对象的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-如何创建一个-bean-对象的"}},[a._v("#")]),a._v(" Spring 如何创建一个 Bean 对象的？")]),a._v(" "),t("p",[a._v("通过 "),t("code",[a._v("new UserService()")]),a._v(" 创建的对象和 Spring 容器帮我们创建的 Bean 对象是不一样的，少了依赖注入、属性填充等步骤。依赖注入，指需要给加了 @Autowire 或 @Resource 注解的对象注入到对象中。")]),a._v(" "),t("p",[a._v("也就是说，Spring 在创建 Bean 对象后，再去看看这个对象内部需要哪些对象，并创建内部依赖的对象，并把依赖的对象注入进去。")]),a._v(" "),t("p",[a._v("容器底层就是一个 Map，Key 为 BeanName，Value 为 Bean 对象。单例 Bean 是放在一个单例池中。")]),a._v(" "),t("p",[a._v("依赖注入后，执行初始化前的任务、初始化过程（实现 InitializingBean 接口，实现 afterPropertiesSet 方法）、舒适化后的任务")]),a._v(" "),t("p",[a._v("Bean 实例化：通过构造器得到一个对象")]),a._v(" "),t("p",[a._v("Bean 初始化：对已经实例化的对象，执行初始化方法（自定义的方法）")]),a._v(" "),t("p",[a._v("UserService 类 ---\x3e 推断无参构造器 ---\x3e 对象 ---\x3e 依赖注入 ---\x3e 初始化（@PostConstruct）---\x3e 初始化（InitializingBean）---\x3e 初始化后（AOP）---\x3e  代理对象 ---\x3e 放入单例池 ---\x3e Bean 对象")]),a._v(" "),t("p",[a._v("推断构造方法：Spring 根据类已有的构造方法进行选择，如果有 @Autowired 指定的就用指定的，如果没指定则用无参构造方法。如果有多个有参构造方法，且没有无参构造方法则会报错。当选择好构造方法后，如果构造方法有入参，则会从容器中获取，获取方式先ByType 再 ByName")]),a._v(" "),t("p",[a._v("依赖注入：当对象实例化完成，Spring 会看对象内哪些属性加了 @Autowired 注解，对其进行赋值，先 ByTpe 再 ByName。")]),a._v(" "),t("p",[a._v("当使用 AOP 后，单例池中存放的是代理对象，注意，代理对象后面没有依赖注入了。")]),a._v(" "),t("p",[a._v("OrderService 是一个单例 Bean，那么在 Spring 容器中只能有一个 OrderService 类型的 Bean。这是错的。")]),a._v(" "),t("p",[a._v("当使用 AOP 对被代理类进行增强时生成了代理类对象 UserServiceProxy。普通对象 UserService 里面包含对象 OrderService，Spring 容器会自动将 OrderService 注入到 UserService 内。但 UserServiceProxy 对象内部的 OrderService = null，因为前面说过了，AOP 之后不会再依赖注入了，但使用 UserServiceProxy 的时候依然能够使用 OrderService 里面的方法，因为 UserServiceProxy 里面包含了被代理对象 UserService，而 UserService 对象内部已经注入了 OrderService。代理类增强代理类的方法：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 前面方法1")]),a._v("\n\ttarget"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 执行被代理类的方法")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 切面方法2")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h2",{attrs:{id:"spring-中-bean-创建的生命周期有哪些步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-中-bean-创建的生命周期有哪些步骤"}},[a._v("#")]),a._v(" Spring 中 Bean 创建的生命周期有哪些步骤？")]),a._v(" "),t("p",[a._v("Spring 创建 BeanDefination 步骤：")]),a._v(" "),t("ol",[t("li",[a._v("通过 xml、注解读取 BeanDefination 定义信息")]),a._v(" "),t("li",[a._v("通过 BeanFactoryPostProcess 可以对 BeanDefination 进行修改")])]),a._v(" "),t("p",[a._v("Spring 中一个 Bean 的创建大概分为以下几个步骤：")]),a._v(" "),t("ol",[t("li",[a._v("推断构造方法：使用哪个构造器")]),a._v(" "),t("li",[a._v("实例化")]),a._v(" "),t("li",[a._v("填充属性，也就是依赖注入")]),a._v(" "),t("li",[a._v("处理 Aware 回调，给自定义对象赋值 Spring 的容器")]),a._v(" "),t("li",[a._v("初始化前，applyBeanPostProcessorsBeforeInitialization")]),a._v(" "),t("li",[a._v("初始化，处理 InitalizingBean 接口")]),a._v(" "),t("li",[a._v("初始化后，applyBeanPostProcessorsAfterInitialization")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/Bean-life-cycle.png",alt:"image-20220820213610149"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs2022/spring-bean-life-cycle.png",alt:"img"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);