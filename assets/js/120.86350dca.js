(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{441:function(e,t,o){"use strict";o.r(t);var a=o(8),r=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"zookeeper的使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper的使用场景"}},[e._v("#")]),e._v(" Zookeeper的使用场景")]),e._v(" "),t("p",[e._v("转自："),t("a",{attrs:{href:"https://github.com/doocs/advanced-java/blob/main/docs/distributed-system/zookeeper-application-scenarios.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("docs/advanced-java"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("zookeeper 的使用场景如下：")]),e._v(" "),t("ul",[t("li",[e._v("分布式协调")]),e._v(" "),t("li",[e._v("分布式锁")]),e._v(" "),t("li",[e._v("元数据/配置信息管理")]),e._v(" "),t("li",[e._v("HA 高可用性")])]),e._v(" "),t("h2",{attrs:{id:"分布式协调"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式协调"}},[e._v("#")]),e._v(" 分布式协调")]),e._v(" "),t("p",[e._v("A 系统发送请求到 mq，B 系统消费 mq 中的消息。那 A 系统如何知道 B 系统的处理结果？用 zookeeper 就可以实现分布式系统之间的协调工作。A 系统发送请求之后可以在 zookeeper 上"),t("strong",[e._v("对某个节点的值注册个监听器")]),e._v("，一旦 B 系统处理完了就修改 zookeeper 那个节点的值，A 系统立马就可以收到通知，完美解决。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs/zookeeper-distributed-coordination.png",alt:"zookeeper-distributed-coordination"}})]),e._v(" "),t("h2",{attrs:{id:"分布式锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁"}},[e._v("#")]),e._v(" 分布式锁")]),e._v(" "),t("p",[e._v("对某一个数据连续发出两个修改操作，两台机器同时收到了请求，但是只能一台机器先执行完另外一个机器再执行。那么此时就可以使用 zookeeper 分布式锁，一个机器接收到了请求之后先获取 zookeeper 上的一把分布式锁，就是可以去创建一个 znode，接着执行操作；然后另外一个机器也"),t("strong",[e._v("尝试去创建")]),e._v("那个 znode，结果发现自己创建不了，因为被别人创建了，那只能等着，等第一个机器执行完了自己再执行。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs/zookeeper-distributed-lock-demo.png",alt:"zookeeper-distributed-lock-demo"}})]),e._v(" "),t("h2",{attrs:{id:"元数据-配置信息管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元数据-配置信息管理"}},[e._v("#")]),e._v(" 元数据/配置信息管理")]),e._v(" "),t("p",[e._v("zookeeper 可以用作很多系统的配置信息的管理，比如 kafka、storm 等等很多分布式系统都会选用 zookeeper 来做一些元数据、配置信息的管理，包括 dubbo 注册中心也可以选用 zookeeper")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs/zookeeper-meta-data-manage.png",alt:"zookeeper-meta-data-manage"}})]),e._v(" "),t("h2",{attrs:{id:"ha-高可用性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ha-高可用性"}},[e._v("#")]),e._v(" HA 高可用性")]),e._v(" "),t("p",[e._v("这个应该是很常见的，比如 hadoop、hdfs、yarn 等很多大数据系统，都选择基于 zookeeper 来开发 HA 高可用机制，就是一个"),t("strong",[e._v("重要进程一般会做主备")]),e._v("两个，主进程挂了立马通过 zookeeper 感知到切换到备用进程。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/zouquchen/Images/main/imgs/zookeeper-active-standby.png",alt:"zookeeper-active-standby"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);